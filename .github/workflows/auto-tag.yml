name: Auto Tag and Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to tag (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: true
        type: boolean

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "25.1"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Go tools and dependencies
        run: |
          go mod download
          make install-tools

      - name: Generate protobuf files
        run: make proto

      - name: Run tests before tagging
        run: make test

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manual version: $VERSION"
          else
            # Auto-detect from changelog
            VERSION=$(grep -E "^## \[[0-9]+\.[0-9]+\.[0-9]+\]" CHANGELOG.md | head -1 | sed -E 's/^## \[([0-9]+\.[0-9]+\.[0-9]+)\].*/v\1/')
            if [ -z "$VERSION" ]; then
              echo "No new version detected in changelog"
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          # Check if tag exists
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists"
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "skip=false" >> $GITHUB_OUTPUT

      - name: Create tag
        if: steps.version.outputs.skip != 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create and push tag
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
          
          echo "Created and pushed tag: $VERSION"

      - name: Create Release
        if: steps.version.outputs.skip != 'true' && (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true' || github.event_name == 'push')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Create release notes
          cat > release_notes.md << EOF
          ## Changes in $VERSION
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for full details.
          
          ### Installation
          \`\`\`bash
          go get github.com/${{ github.repository }}@$VERSION
          \`\`\`
          EOF
          
          # Create GitHub release
          gh release create "$VERSION" \
            --title "Release $VERSION" \
            --notes-file release_notes.md \
            --latest

      - name: Summary
        if: steps.version.outputs.skip != 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "## Release Summary ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: Created and pushed" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: Created on GitHub" >> $GITHUB_STEP_SUMMARY
          echo "- **Installation**: \`go get github.com/${{ github.repository }}@$VERSION\`" >> $GITHUB_STEP_SUMMARY
