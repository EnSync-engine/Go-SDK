// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: internal/proto/ensync.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnSyncService_Connect_FullMethodName          = "/ensync.EnSyncService/Connect"
	EnSyncService_Heartbeat_FullMethodName        = "/ensync.EnSyncService/Heartbeat"
	EnSyncService_PublishEvent_FullMethodName     = "/ensync.EnSyncService/PublishEvent"
	EnSyncService_Subscribe_FullMethodName        = "/ensync.EnSyncService/Subscribe"
	EnSyncService_Unsubscribe_FullMethodName      = "/ensync.EnSyncService/Unsubscribe"
	EnSyncService_AcknowledgeEvent_FullMethodName = "/ensync.EnSyncService/AcknowledgeEvent"
	EnSyncService_DeferEvent_FullMethodName       = "/ensync.EnSyncService/DeferEvent"
	EnSyncService_DiscardEvent_FullMethodName     = "/ensync.EnSyncService/DiscardEvent"
	EnSyncService_ReplayEvent_FullMethodName      = "/ensync.EnSyncService/ReplayEvent"
	EnSyncService_PauseEvents_FullMethodName      = "/ensync.EnSyncService/PauseEvents"
	EnSyncService_ContinueEvents_FullMethodName   = "/ensync.EnSyncService/ContinueEvents"
)

// EnSyncServiceClient is the client API for EnSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Main EnSync service for client communication
type EnSyncServiceClient interface {
	// Connection & Authentication
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// Event Publishing
	PublishEvent(ctx context.Context, in *PublishEventRequest, opts ...grpc.CallOption) (*PublishEventResponse, error)
	// Event Subscription - Returns a stream of events
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventStreamResponse], error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
	// Event Management
	AcknowledgeEvent(ctx context.Context, in *AcknowledgeRequest, opts ...grpc.CallOption) (*AcknowledgeResponse, error)
	DeferEvent(ctx context.Context, in *DeferRequest, opts ...grpc.CallOption) (*DeferResponse, error)
	DiscardEvent(ctx context.Context, in *DiscardRequest, opts ...grpc.CallOption) (*DiscardResponse, error)
	ReplayEvent(ctx context.Context, in *ReplayRequest, opts ...grpc.CallOption) (*ReplayResponse, error)
	// Flow Control
	PauseEvents(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error)
	ContinueEvents(ctx context.Context, in *ContinueRequest, opts ...grpc.CallOption) (*ContinueResponse, error)
}

type enSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnSyncServiceClient(cc grpc.ClientConnInterface) EnSyncServiceClient {
	return &enSyncServiceClient{cc}
}

func (c *enSyncServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, EnSyncService_Connect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enSyncServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, EnSyncService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enSyncServiceClient) PublishEvent(ctx context.Context, in *PublishEventRequest, opts ...grpc.CallOption) (*PublishEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishEventResponse)
	err := c.cc.Invoke(ctx, EnSyncService_PublishEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enSyncServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EnSyncService_ServiceDesc.Streams[0], EnSyncService_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, EventStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnSyncService_SubscribeClient = grpc.ServerStreamingClient[EventStreamResponse]

func (c *enSyncServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, EnSyncService_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enSyncServiceClient) AcknowledgeEvent(ctx context.Context, in *AcknowledgeRequest, opts ...grpc.CallOption) (*AcknowledgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgeResponse)
	err := c.cc.Invoke(ctx, EnSyncService_AcknowledgeEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enSyncServiceClient) DeferEvent(ctx context.Context, in *DeferRequest, opts ...grpc.CallOption) (*DeferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeferResponse)
	err := c.cc.Invoke(ctx, EnSyncService_DeferEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enSyncServiceClient) DiscardEvent(ctx context.Context, in *DiscardRequest, opts ...grpc.CallOption) (*DiscardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscardResponse)
	err := c.cc.Invoke(ctx, EnSyncService_DiscardEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enSyncServiceClient) ReplayEvent(ctx context.Context, in *ReplayRequest, opts ...grpc.CallOption) (*ReplayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplayResponse)
	err := c.cc.Invoke(ctx, EnSyncService_ReplayEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enSyncServiceClient) PauseEvents(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PauseResponse)
	err := c.cc.Invoke(ctx, EnSyncService_PauseEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enSyncServiceClient) ContinueEvents(ctx context.Context, in *ContinueRequest, opts ...grpc.CallOption) (*ContinueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContinueResponse)
	err := c.cc.Invoke(ctx, EnSyncService_ContinueEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnSyncServiceServer is the server API for EnSyncService service.
// All implementations must embed UnimplementedEnSyncServiceServer
// for forward compatibility.
//
// Main EnSync service for client communication
type EnSyncServiceServer interface {
	// Connection & Authentication
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// Event Publishing
	PublishEvent(context.Context, *PublishEventRequest) (*PublishEventResponse, error)
	// Event Subscription - Returns a stream of events
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[EventStreamResponse]) error
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
	// Event Management
	AcknowledgeEvent(context.Context, *AcknowledgeRequest) (*AcknowledgeResponse, error)
	DeferEvent(context.Context, *DeferRequest) (*DeferResponse, error)
	DiscardEvent(context.Context, *DiscardRequest) (*DiscardResponse, error)
	ReplayEvent(context.Context, *ReplayRequest) (*ReplayResponse, error)
	// Flow Control
	PauseEvents(context.Context, *PauseRequest) (*PauseResponse, error)
	ContinueEvents(context.Context, *ContinueRequest) (*ContinueResponse, error)
	mustEmbedUnimplementedEnSyncServiceServer()
}

// UnimplementedEnSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnSyncServiceServer struct{}

func (UnimplementedEnSyncServiceServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedEnSyncServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedEnSyncServiceServer) PublishEvent(context.Context, *PublishEventRequest) (*PublishEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishEvent not implemented")
}
func (UnimplementedEnSyncServiceServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[EventStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedEnSyncServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedEnSyncServiceServer) AcknowledgeEvent(context.Context, *AcknowledgeRequest) (*AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeEvent not implemented")
}
func (UnimplementedEnSyncServiceServer) DeferEvent(context.Context, *DeferRequest) (*DeferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeferEvent not implemented")
}
func (UnimplementedEnSyncServiceServer) DiscardEvent(context.Context, *DiscardRequest) (*DiscardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardEvent not implemented")
}
func (UnimplementedEnSyncServiceServer) ReplayEvent(context.Context, *ReplayRequest) (*ReplayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplayEvent not implemented")
}
func (UnimplementedEnSyncServiceServer) PauseEvents(context.Context, *PauseRequest) (*PauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseEvents not implemented")
}
func (UnimplementedEnSyncServiceServer) ContinueEvents(context.Context, *ContinueRequest) (*ContinueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContinueEvents not implemented")
}
func (UnimplementedEnSyncServiceServer) mustEmbedUnimplementedEnSyncServiceServer() {}
func (UnimplementedEnSyncServiceServer) testEmbeddedByValue()                       {}

// UnsafeEnSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnSyncServiceServer will
// result in compilation errors.
type UnsafeEnSyncServiceServer interface {
	mustEmbedUnimplementedEnSyncServiceServer()
}

func RegisterEnSyncServiceServer(s grpc.ServiceRegistrar, srv EnSyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnSyncService_ServiceDesc, srv)
}

func _EnSyncService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnSyncServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnSyncService_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnSyncServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnSyncService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnSyncServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnSyncService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnSyncServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnSyncService_PublishEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnSyncServiceServer).PublishEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnSyncService_PublishEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnSyncServiceServer).PublishEvent(ctx, req.(*PublishEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnSyncService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnSyncServiceServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, EventStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnSyncService_SubscribeServer = grpc.ServerStreamingServer[EventStreamResponse]

func _EnSyncService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnSyncServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnSyncService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnSyncServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnSyncService_AcknowledgeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnSyncServiceServer).AcknowledgeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnSyncService_AcknowledgeEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnSyncServiceServer).AcknowledgeEvent(ctx, req.(*AcknowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnSyncService_DeferEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnSyncServiceServer).DeferEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnSyncService_DeferEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnSyncServiceServer).DeferEvent(ctx, req.(*DeferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnSyncService_DiscardEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnSyncServiceServer).DiscardEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnSyncService_DiscardEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnSyncServiceServer).DiscardEvent(ctx, req.(*DiscardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnSyncService_ReplayEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnSyncServiceServer).ReplayEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnSyncService_ReplayEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnSyncServiceServer).ReplayEvent(ctx, req.(*ReplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnSyncService_PauseEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnSyncServiceServer).PauseEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnSyncService_PauseEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnSyncServiceServer).PauseEvents(ctx, req.(*PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnSyncService_ContinueEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnSyncServiceServer).ContinueEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnSyncService_ContinueEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnSyncServiceServer).ContinueEvents(ctx, req.(*ContinueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnSyncService_ServiceDesc is the grpc.ServiceDesc for EnSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ensync.EnSyncService",
	HandlerType: (*EnSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _EnSyncService_Connect_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _EnSyncService_Heartbeat_Handler,
		},
		{
			MethodName: "PublishEvent",
			Handler:    _EnSyncService_PublishEvent_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _EnSyncService_Unsubscribe_Handler,
		},
		{
			MethodName: "AcknowledgeEvent",
			Handler:    _EnSyncService_AcknowledgeEvent_Handler,
		},
		{
			MethodName: "DeferEvent",
			Handler:    _EnSyncService_DeferEvent_Handler,
		},
		{
			MethodName: "DiscardEvent",
			Handler:    _EnSyncService_DiscardEvent_Handler,
		},
		{
			MethodName: "ReplayEvent",
			Handler:    _EnSyncService_ReplayEvent_Handler,
		},
		{
			MethodName: "PauseEvents",
			Handler:    _EnSyncService_PauseEvents_Handler,
		},
		{
			MethodName: "ContinueEvents",
			Handler:    _EnSyncService_ContinueEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _EnSyncService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto/ensync.proto",
}
